<START> ::= <prog> 'eof'   

<addOp> ::= '+' createLeaf("+")
<addOp> ::= '-' createLeaf("-")
<addOp> ::= 'or' createLeaf(or)

<aParams> ::= <expr> <rept-aParams1>   
<aParams> ::= EPSILON

<aParamsTail>  ::= ',' <expr>   

<arithExpr>  ::= <term>  <rightrec-arithExpr>    

<arraySize>  ::= '[' <arraySize2> 

<arraySize2>  ::= 'intlit' ']' createLeaf(arraysize)
<arraySize2>  ::= ']' createLeaf(emptysize)

<assignOp>  ::= '=' createLeaf("=")

<expr> ::= <arithExpr>  <expr2> 

<expr2>  ::= <relOp>  <arithExpr>    
<expr2>  ::= EPSILON

<factor>  ::= 'id' createLeaf(id) <factor2> push(ε) <rept-var-or-funcCall> push(createSubtree(indicelist), popuntilε)  
<factor>  ::= 'intlit' createLeaf(intLit)
<factor>  ::= 'floatlit' createLeaf(floatLit)
<factor>  ::= push(ε) '(' <arithExpr>  ')' createSubtree(arithExpr,popuntilε)
<factor>  ::= 'not' createLeaf(not) <factor> 
<factor>  ::= <sign> createSubtree(sign, pop) <factor>    

<factor2>  ::= push(ε) '(' <aParams> ')' createSubtree(paramList,popuntilε) createSubtree(var,pop,pop)
<factor2>  ::= push(ε) <rept-idnest1> createSubtree(indicelist,popuntilε) createSubtree(var,pop,pop)

<fParams>  ::= 'id' ':' <type> createSubtree(type, pop) push(ε) <rept-fParams3> createSubtree(arraySizeList,popuntilε) push(ε) <rept-fParams4> createSubtree(paramTailList,popuntilε)
<fParams>  ::= EPSILON

<fParamsTail> ::= ',' 'id' ':' <type> createSubtree(type, pop) push(ε) <rept-fParamsTail4> createSubtree(arraySizeList,popuntilε)

<funcBody> ::= '{' push(ε) <rept-funcBody1> createSubtree(funcBody, -1) '}'   

<funcDecl> ::= <funcHead> ';'   

<funcDef> ::= <funcHead> <funcBody> createSubtree(function, 4)

<funcHead> ::= 'func' 'id' createLeaf(id) push(ε) '(' <fParams> ')' createSubtree(funcParams, -1) 'arrow' <returnType>  createSubtree(returnType, pop)

<statement> ::= 'id' <statement-Id-nest> ';'  
<statement> ::= 'if' '(' <relExpr> ')' 'then' <statBlock> 'else' <statBlock> ';'   
<statement> ::= 'while' '(' <relExpr> ')' <statBlock> ';'   
<statement> ::= 'read' '(' <variable> ')' ';'   
<statement> ::= 'write' '(' <expr> ')' ';'   
<statement> ::= 'return' '(' <expr> ')' ';'   


<statement-Id-nest> ::= '.' 'id' <statement-Id-nest>   
<statement-Id-nest> ::= '(' <aParams> ')' <statement-Id-nest2>  
<statement-Id-nest> ::= <indice> <rept-idnest1> <statement-Id-nest3>  
<statement-Id-nest> ::= <assignOp>  <expr>   

<statement-Id-nest2> ::= EPSILON
<statement-Id-nest2> ::= '.' 'id' <statement-Id-nest>   

<statement-Id-nest3> ::= <assignOp>  <expr>    
<statement-Id-nest3> ::= '.' 'id' <statement-Id-nest>   

<rept-idnest1> ::= <indice> createSubtree(indice, pop, pop) <rept-idnest1>   
<rept-idnest1> ::= EPSILON

<rept-var-or-funcCall>  ::=  <idNest> <rept-var-or-funcCall>    
<rept-var-or-funcCall>  ::=  EPSILON

<idNest> ::= '.' 'id' createLeaf(id) <idNest2> createSubtree(dot,pop,pop)
<idNest2> ::= push(ε) '(' <aParams> ')' createSubtree(paramList,popuntilε) createSubtree(var,pop,pop)
<idNest2> ::= push(ε) <rept-idnest1> createSubtree(indicelist,popuntilε) 


<implDef> ::= 'impl' 'id' '{' <rept-implDef3> '}'   

<indice> ::= '[' <arithExpr>  ']'   

<memberDecl> ::= <funcDecl> createSubtree(funcDecl, pop)
<memberDecl> ::= <varDecl> createSubtree(varDecl, pop, pop)

<multOp> ::= '*'   
<multOp> ::= '/'   
<multOp> ::= 'and'   

<opt-structDecl2> ::= 'inherits' 'id' <rept-opt-structDecl22>   
<opt-structDecl2> ::= EPSILON

<prog> ::= <rept-prog0> 

<relExpr> ::= <arithExpr>  <relOp>  <arithExpr>    

<relOp>  ::= 'eq'   
<relOp>  ::= 'neq'   
<relOp>  ::= 'lt'   
<relOp>  ::= 'gt'   
<relOp>  ::= 'leq'   
<relOp>  ::= 'geq'   

<rept-aParams1> ::= createSubtree(factor) <aParamsTail>  <rept-aParams1>
<rept-aParams1> ::= createSubtree(factor) EPSILON

<rept-fParams3> ::= <arraySize>  <rept-fParams3>   
<rept-fParams3> ::= EPSILON

<rept-fParams4> ::= <fParamsTail> <rept-fParams4>   
<rept-fParams4> ::= EPSILON

<rept-fParamsTail4> ::= <arraySize>  <rept-fParamsTail4>   
<rept-fParamsTail4> ::= EPSILON

<rept-funcBody1> ::= <varDeclOrStat> <rept-funcBody1>   
<rept-funcBody1> ::= EPSILON

<rept-implDef3> ::= <funcDef> <rept-implDef3>   
<rept-implDef3> ::= EPSILON

<rept-opt-structDecl22> ::= createLeaf(id) ',' 'id' <rept-opt-structDecl22>   
<rept-opt-structDecl22> ::= createLeaf(id) EPSILON

<rept-prog0> ::= <structOrImplOrfunc> <rept-prog0>   
<rept-prog0> ::= EPSILON

<rept-statBlock1> ::= <statement> createSubtree(statement, pop) <rept-statBlock1>   
<rept-statBlock1> ::= EPSILON

<rept-structDecl4> ::= <visibility> createSubtree(visibility, pop) <memberDecl> <rept-structDecl4>   
<rept-structDecl4> ::= EPSILON

<rept-varDecl4> ::= <arraySize>  <rept-varDecl4>   
<rept-varDecl4> ::= EPSILON



<returnType> ::= <type>  createSubtree(type, pop)
<returnType> ::= 'void'  createLeaf(void)

<rightrec-arithExpr>  ::= createSubtree(term) EPSILON
<rightrec-arithExpr>  ::= createSubtree(term) <addOp> <term>  <rightrec-arithExpr>    

<rightRecTerm>  ::= EPSILON
<rightRecTerm>  ::= <multOp> push(ε) <factor> createSubtree(factor,popuntilε) <rightRecTerm>    

<sign> ::= '+' createLeaf(plus)
<sign> ::= '-' createLeaf(minus)

<statBlock> ::= push(ε) '{' <rept-statBlock1> '}' createSubtree(statBlock,popuntilε)
<statBlock> ::= <statement> push(createSubtree(statBlock, pop)
<statBlock> ::= EPSILON



<structDecl> ::= 'struct' 'id' <opt-structDecl2> '{' <rept-structDecl4> '}' ';'   

<structOrImplOrfunc> ::= <structDecl> createSubtree(struct, pop)
<structOrImplOrfunc> ::= <implDef> createSubtree(impl, pop)
<structOrImplOrfunc> ::= <funcDef>

<term>  ::= push(ε) <factor> createSubtree(factor,popuntilε) <rightRecTerm>    

<type> ::= 'integer' createLeaf(integer)
<type> ::= 'float' createLeaf(float)
<type> ::= 'id' createLeaf(id)

<varDecl> ::= 'let' 'id' ':' <type> createSubtree(type, pop) push(ε) <rept-varDecl4> createSubtree(arraySizeList,popuntilε) ';'   

<varDeclOrStat> ::= <varDecl>  createSubtree(varDecl, pop, pop)
<varDeclOrStat> ::= <statement>  createSubtree(statement, pop)

<variable> ::=  'id' createLeaf(id) <variable2>  

<variable2> ::=  push(ε) <rept-idnest1> createSubtree(indicelist,popuntilε) createSubtree(var,pop,pop) <rept-variable>    
<variable2> ::=  push(ε) '(' <aParams> ')' createSubtree(paramList,popuntilε) createSubtree(var,pop,pop) <var-idNest>    

<rept-variable> ::=  <var-idNest> <rept-variable>   
<rept-variable> ::=  EPSILON

<var-idNest> ::= '.' 'id' createLeaf(id) <var-idNest2> createSubtree(dot,pop,pop) 
<var-idNest2> ::= push(ε) '(' <aParams> ')' createSubtree(paramList,popuntilε) createSubtree(var,pop,pop) <var-idNest>   
<var-idNest2> ::= push(ε) <rept-idnest1> createSubtree(indicelist,popuntilε)) 


<visibility> ::= 'public' createLeaf(public)
<visibility> ::= 'private' createLeaf(private)


